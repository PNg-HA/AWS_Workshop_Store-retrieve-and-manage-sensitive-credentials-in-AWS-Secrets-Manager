[
{
	"uri": "//localhost:1313/vi/",
	"title": "Lưu trữ, truy xuất và quản lý thông tin xác thực nhạy cảm trong AWS Secrets Manager",
	"tags": [],
	"description": "",
	"content": "Security Architects đang tìm cách giảm thiểu việc truy cập vào các plaintext secret bởi các nhóm phát triển ứng dụng của họ. Các nhà phát triển muốn có một cơ chế để truy xuất secret một cách an toàn mà không cần mã hóa thông tin xác thực trực tiếp trong ứng dụng của họ. Họ cũng muốn đảm bảo rằng việc luân chuyển secret sẽ không ảnh hưởng đến tính sẵn sàng của ứng dụng. Các nhóm tuân thủ muốn có cơ chế giám sát tính bảo mật của secret và phù hợp với các biện pháp hoặc chính sách tốt nhất. Cuối cùng, SOC muốn có cơ chế phản hồi các hành động trái phép hoặc sai sót đối với các secret.\nTrong buổi workshop này, bạn sẽ sử dụng một ứng dụng serverless mẫu với các hàm AWS Lambda kết nối đến cơ sở dữ liệu Amazon RDS. Bạn sẽ kiểm tra việc truy xuất lập trình các thông tin xác thực cơ sở dữ liệu từ AWS Secrets Manager cũng như triển khai Attribute-based Access Control (ABAC) bằng cách sử dụng tags. Bạn sẽ theo dõi trạng thái tuân thủ của các secret bằng AWS Config. Sau đó, bạn sẽ luân phiên các secret trong AWS Secrets Manager và kiểm tra quyền truy cập ứng dụng. Cuối cùng, bạn sẽ kiểm tra các nỗ lực xóa chính sách tài nguyên secret để truy xuất các plaintext secret từ AWS Secrets Manager. hững người tham dự sẽ sử dụng phản hồi theo sự kiện AWS Event Bridge để triển khai các quy trình phản hồi sự cố sẽ luân phiên secret, khôi phục chính sách tài nguyên, cảnh báo SOC và từ chối quyền truy cập đối với kẻ vi phạm.\nTình huống Bạn đang làm việc tại một công ty đang chuyển sang lưu trữ thông tin xác thực của họ trong AWS Secrets Manager. Thay vì các ứng dụng sử dụng thông tin xác thực được mã hóa cứng, các nhà phát triển sẽ sử dụng Secrets Manager để truy xuất thông tin xác thực của Cơ sở dữ liệu để kết nối với cơ sở dữ liệu.\nChúng ta sẽ giả định rằng các yêu cầu bảo mật của tổ chức quy định:\nTất cả các secret phải được mã hóa khi lưu trữ bằng Customer Managed Keys Tất cả các nỗ lực sửa đổi hoặc truy xuất secret bởi người dùng không được phép phải thông báo cho Quản trị viên và SOC. Kích hoạt tự động hóa phản ứng sự cố để luân phiên secret và giảm hồ sơ quyền hạn của người dùng trái phép. Trong buổi workshop này, bạn sẽ đảm nhận hai vai trò. Đầu tiên, bạn sẽ đảm nhận vai trò của Quản trị viên để triển khai cấu hình nhằm quản lý các secret được lưu trữ trong Secrets Manager. Thứ hai, bạn sẽ đảm nhận vai trò của Nhà phát triển để cấu hình ứng dụng của bạn để yêu cầu thông tin xác thự của Cơ sở dữ liệu từ Secrets Manager thay vì sử dụng các biến môi trường được mã hóa trực tiếp. Bạn cũng sẽ kiểm tra cấu hình phản ứng sự cố mà bạn đã thiết lập để khắc phục các quy trình cập nhật và truy xuất secret.\nỨng dụng mẫu là một hàm Lambda có tên “LambdaRDSTest” ban đầu sử dụng các biến môi trường được mã hóa trực tiếp để kết nối với MySQL RDS Demo Instance.\nBạn sẽ sử dụng secret được tạo trong AWS Secrets Manager trong ứng dụng mẫu của bạn để truy xuất các thông tin xác thực của Cơ sở dữ liệu từ AWS Secrets Manager thay vì sử dụng các biến môi trường được mã hóa trực tiếp.\nBạn cũng sẽ tạo một quy trình tự động để phát hiện, cảnh báo và phản hồi đối với việc xóa chính sách secret và thay đổi trạng thái tuân thủ đối với các secret trong AWS Secrets Manager.\nModules Buổi workshop này được chia thành phần cài đặt và bốn module:\nIntroduction Module-0: Environment Setup Module-1: Retrieving secrets and implementing access control for secrets stored in AWS Secrets Manager Module-2: Monitor compliance of secrets Module-3: Automation of Incident Response workflows Module-4: Recap and summary "
},
{
	"uri": "//localhost:1313/vi/3/3.1/",
	"title": "Cập nhật Ứng dụng Mẫu",
	"tags": [],
	"description": "",
	"content": "Cập nhật ứng dụng mẫu để truy xuất thông tin xác thực của cơ sở dữ liệu từ AWS Secrets Manager Các bước: Cập nhật ứng dụng mẫu để truy xuất thông tin xác thực của cơ sở dữ liệu từ AWS Secrets Manager\nĐiều hướng đến bảng điều khiển dịch vụ Lambda. Chọn “Functions” từ bảng điều khiển bên trái. Nhấp vào tên hàm “LambdaRDSTest”. Đây là hàm được sử dụng cho ứng dụng mẫu để kết nối với cơ sở dữ liệu RDS. Hàm này được viết bằng ngôn ngữ Python. Cơ sở dữ liệu chứa dữ liệu mẫu về Tên và Họ.\nBạn có thể xem code của ứng dụng mẫu bằng cách nhấp đúp vào “LambdaRDSTest.py” trong phần “Code Source”.\nHàm openConnection() trong code kết nối với cơ sở dữ liệu MySQL RDS bằng cách sử dụng các tham số được lưu trữ trong Biến Môi Trường (Environment Variables). Khi cơ sở dữ liệu được kết nối, ứng dụng sẽ in ra dữ liệu mẫu. 4. Dán và truy cập API URL mà bạn đã sao chép trước đó (trong phần Event Outputs của CloudFormation stack) trên một tab trình duyệt web riêng. Bạn sẽ thấy thông báo Database not connected.\nQ: Tại sao ứng dụng không thể kết nối với cơ sở dữ liệu RDS để lấy dữ liệu mẫu? A: Do password đã dc configure để dc dùng từ Amazon Secret Manager 5. Bây giờ, hãy cập nhật code hàm “LambdaRDSTest” để lấy thông tin xác thực củacơ sở dữ liệu từ Secrets Manager thay vì sử dụng Biến Môi Trường. Quay lại tab trình duyệt nơi code LambdaRDSTest.py được mở.\na. Comment 4 dòng code sau (dòng số 15, 16, 17, 18) bằng cách thêm dấu # ở đầu mỗi dòng như hiển thị dưới đây.\nb. Dưới mục “Configuration”, nhấp vào “Environment variables”. Bạn sẽ thấy các Biến Môi Trường tương tự như dưới đây: c. Xóa tất cả các cặp khóa giá trị (Key Value pairs) cho các Biến Môi Trường:\nQuay lại mã nguồn trong phần “Code Source”:\nNhấp vào “Deploy” để lưu các thay đổi và đợi cho đến khi xuất hiện thông báo sau:\nĐiều hướng đến bảng điều khiển dịch vụ Secrets Manager . Nhấp vào secret được tạo bởi CloudFormation template. Tên của secret sẽ là “DemoWorkshopSecret“. Cuộn xuống phần “Sample code”. Nhấp vào “Python3”.\nChọn và sao chép code từ dòng #11 đến dòng #34. Lưu ý: Python là ngôn ngữ nhạy cảm với việc căn lề, điều quan trọng là phải căn lề code đúng cách. Hãy chắc chắn rằng bạn chọn code mẫu từ dòng #11, nếu không có thể dẫn đến các vấn đề về căn lề.\nQuay lại tab trình duyệt nơi code hàm LambdaRDSTest đang mở.\nDi chuyển đến dòng #24 trong code và nhấn Enter ở cuối dòng.\nDán code mẫu mà bạn đã sao chép từ Secrets Manager.\nSecrets Manager trả về thông tin xác thực của cơ sở dữ liệu dưới dạng chuỗi. Bây giờ bạn sẽ thêm code để trích xuất các tham số kết nối từ chuỗi trả về để kết nối với cơ sở dữ liệu. Để tiết kiệm thời gian cho workshop này, code đã được thêm sẵn vào hàm Lambda mẫu:\nsecretstring = json.loads(secret)\rrds_host = secretstring[\u0026#39;host\u0026#39;]\rusername = secretstring[\u0026#39;username\u0026#39;]\rpassword = secretstring[\u0026#39;password\u0026#39;]\rdb_name = secretstring[\u0026#39;dbname\u0026#39;] Để sử dụng nó, bạn chỉ cần bỏ comment (bỏ # ở đầu dòng) các dòng code trong hàm Lambda.\nXác minh rằng code đã sửa đổi giống với: Tại thời điểm này, ứng dụng đã được cấu hình để thực hiện kết nối cơ sở dữ liệu bằng cách sử dụng thông tin xác thực được truy xuất từ secret trong AWS Secrets Manager. Lệnh pymysql.connect sử dụng thông tin xác thực được truy xuất từ secret. Nhấp vào “Deploy” để lưu các thay đổi và đợi cho đến khi xuất hiện thông báo sau:\nTruy cập lại API URL trong trình duyệt web của bạn, bạn sẽ thấy dữ liệu mẫu được truy xuất từ cơ sở dữ liệu tương tự như thế này:\nKết quả hiển thị dữ liệu mẫu cũng như Version ID của secret. Khi CloudFormation template được triển khai, secret được cập nhật sau khi nó được tạo lần đầu tiên. Bạn có thể quan sát trong code hàm Lambda rằng một lệnh gọi API describe_secret được thực hiện khi kết nối với cơ sở dữ liệu được mở:\nget_describe_secret_response = client.describe_secret(SecretId=secret_name)\n"
},
{
	"uri": "//localhost:1313/vi/1-instructions/",
	"title": "Hướng dẫn thực hiện Workshop",
	"tags": [],
	"description": "",
	"content": "Security Architects đang tìm cách giảm thiểu việc truy cập vào các plaintext secret bởi các nhóm phát triển ứng dụng của họ. Các nhà phát triển muốn có một cơ chế để truy xuất secret một cách an toàn mà không cần mã hóa thông tin xác thực trực tiếp trong ứng dụng của họ. Họ cũng muốn đảm bảo rằng việc luân chuyển secret sẽ không ảnh hưởng đến tính sẵn sàng của ứng dụng. Các nhóm tuân thủ muốn có cơ chế giám sát tính bảo mật của secret và phù hợp với các biện pháp hoặc chính sách tốt nhất. Cuối cùng, SOC muốn có cơ chế phản hồi các hành động trái phép hoặc sai sót đối với các secret.\nTrong buổi workshop này, bạn sẽ sử dụng một ứng dụng serverless mẫu với các hàm AWS Lambda kết nối đến cơ sở dữ liệu Amazon RDS. Bạn sẽ kiểm tra việc truy xuất lập trình các thông tin xác thực cơ sở dữ liệu từ AWS Secrets Manager cũng như triển khai Attribute-based Access Control (ABAC) bằng cách sử dụng tags. Bạn sẽ theo dõi trạng thái tuân thủ của các secret bằng AWS Config. Sau đó, bạn sẽ luân phiên các secret trong AWS Secrets Manager và kiểm tra quyền truy cập ứng dụng. Cuối cùng, bạn sẽ kiểm tra các nỗ lực xóa chính sách tài nguyên secret để truy xuất các plaintext secret từ AWS Secrets Manager. hững người tham dự sẽ sử dụng phản hồi theo sự kiện AWS Event Bridge để triển khai các quy trình phản hồi sự cố sẽ luân phiên secret, khôi phục chính sách tài nguyên, cảnh báo SOC và từ chối quyền truy cập đối với kẻ vi phạm.\nTình huống Bạn đang làm việc tại một công ty đang chuyển sang lưu trữ thông tin xác thực của họ trong AWS Secrets Manager. Thay vì các ứng dụng sử dụng thông tin xác thực được mã hóa cứng, các nhà phát triển sẽ sử dụng Secrets Manager để truy xuất thông tin xác thực của Cơ sở dữ liệu để kết nối với cơ sở dữ liệu.\nChúng ta sẽ giả định rằng các yêu cầu bảo mật của tổ chức quy định:\nTất cả các secret phải được mã hóa khi lưu trữ bằng Customer Managed Keys Tất cả các nỗ lực sửa đổi hoặc truy xuất secret bởi người dùng không được phép phải thông báo cho Quản trị viên và SOC. Kích hoạt tự động hóa phản ứng sự cố để luân phiên secret và giảm hồ sơ quyền hạn của người dùng trái phép. Trong buổi workshop này, bạn sẽ đảm nhận hai vai trò. Đầu tiên, bạn sẽ đảm nhận vai trò của Quản trị viên để triển khai cấu hình nhằm quản lý các secret được lưu trữ trong Secrets Manager. Thứ hai, bạn sẽ đảm nhận vai trò của Nhà phát triển để cấu hình ứng dụng của bạn để yêu cầu thông tin xác thự của Cơ sở dữ liệu từ Secrets Manager thay vì sử dụng các biến môi trường được mã hóa trực tiếp. Bạn cũng sẽ kiểm tra cấu hình phản ứng sự cố mà bạn đã thiết lập để khắc phục các quy trình cập nhật và truy xuất secret.\nỨng dụng mẫu là một hàm Lambda có tên “LambdaRDSTest” ban đầu sử dụng các biến môi trường được mã hóa trực tiếp để kết nối với MySQL RDS Demo Instance.\nBạn sẽ sử dụng secret được tạo trong AWS Secrets Manager trong ứng dụng mẫu của bạn để truy xuất các thông tin xác thực của Cơ sở dữ liệu từ AWS Secrets Manager thay vì sử dụng các biến môi trường được mã hóa trực tiếp.\nBạn cũng sẽ tạo một quy trình tự động để phát hiện, cảnh báo và phản hồi đối với việc xóa chính sách secret và thay đổi trạng thái tuân thủ đối với các secret trong AWS Secrets Manager.\nModules Buổi workshop này được chia thành phần cài đặt và bốn module:\nModule-0: Environment Setup Module-1: Retrieving secrets and implementing access control for secrets stored in AWS Secrets Manager Module-2: Monitor compliance of secrets Module-3: Automation of Incident Response workflows Module-4: Recap and summary "
},
{
	"uri": "//localhost:1313/vi/5/5.1/",
	"title": "Tạo Amazon EventBridge Event Rule",
	"tags": [],
	"description": "",
	"content": "Điều kiện tiên quyết:\nNếu chưa hoàn thành, hãy hoàn thành Nhiệm vụ-2.2 trước khi bắt đầu phần này. Các bước thực hiện: Điều hướng đến Bảng điều khiển dịch vụ Amazon EventBridge.\nChọn “Rules\u0026quot; từ bảng điều khiển bên trái và nhấp vào “Create rule”.\nNhập Tên cho Event Rule theo ý của bạn, ví dụ: “DeleteSecretResourcePolicyRule”.\nNhấp vào \u0026ldquo;Next\u0026rdquo;.\nCuộn xuống phần “Event pattern” và chọn “Custom patterns (JSON editor)”.\nDán mẫu sau vào “Event pattern” textbox:\n{\r\u0026#34;source\u0026#34;: [\r\u0026#34;aws.secretsmanager\u0026#34;\r],\r\u0026#34;detail-type\u0026#34;: [\r\u0026#34;AWS API Call via CloudTrail\u0026#34;\r],\r\u0026#34;detail\u0026#34;: {\r\u0026#34;eventSource\u0026#34;: [\r\u0026#34;secretsmanager.amazonaws.com\u0026#34;\r],\r\u0026#34;eventName\u0026#34;: [\r\u0026#34;DeleteResourcePolicy\u0026#34;\r]\r}\r} Nó sẽ trông như thế này:\nNhấp vào \u0026ldquo;Next\u0026rdquo;.\nTrong bước “Select target(s)”, chọn “Lambda function” từ danh sách thả xuống cho Target 1.\nChọn hàm có tên “UpdateSecretPolicyLambdaFunction” và nhấp vào “Add another target”.\nChọn “SNS topic” từ danh sách thả xuống đầu tiên và tên của SNS topic “ASMWorkshopTopic“ (bạn đã tạo trong Nhiệm vụ-2.2) trong danh sách thả xuống thứ hai.\nMở rộng \u0026ldquo;Additional settings\u0026rdquo; và chọn \u0026ldquo;Input transformer\u0026rdquo; từ menu thả xuống.\nNhấp vào \u0026ldquo;Configure input transformer\u0026rdquo;.\nCuộn xuống phần \u0026ldquo;Target input transformer\u0026rdquo; và dán đoạn sau vào \u0026ldquo;Input path\u0026rdquo; textbox:\n{\u0026#34;AccessingParty\u0026#34;:\u0026#34;$.detail.userIdentity.arn\u0026#34;,\u0026#34;EventTime\u0026#34;:\u0026#34;$.detail.eventTime\u0026#34;,\u0026#34;Secret\u0026#34;:\u0026#34;$.detail.responseElements.aRN\u0026#34;} Dán đoạn sau vào \u0026ldquo;Template\u0026rdquo; textbox. \u0026#34;The Resource Policy of a secret \u0026lt;Secret\u0026gt; was attempted for deletion by \u0026lt;AccessingParty\u0026gt; on \u0026lt;EventTime\u0026gt;. \u0026#34; Nhấp vào \u0026ldquo;Confirm\u0026rdquo;.\nNhấp vào \u0026ldquo;Next\u0026rdquo; và tiếp tục nhấp vào \u0026ldquo;Next\u0026rdquo; để bỏ qua bước \u0026ldquo;Configure tags\u0026rdquo;.\nCuộn xuống và nhấp vào “Create rule\u0026quot;. Khi Rule được tạo, bạn sẽ thấy một thông báo màu xanh lá cây ở đầu màn hình:\n"
},
{
	"uri": "//localhost:1313/vi/4/4.1/",
	"title": "Xem xét AWS Config Rules cho Secrets Manager",
	"tags": [],
	"description": "",
	"content": "Năm Config rules để kiểm tra tính tuân thủ cho các secret được lưu trữ trong AWS Secrets Manager đã được tạo sẵn cho workshop này:\nsecretsmanager-workshop-rotation-enabled-check Kiểm tra AWS Secrets Manager secret có bật tính năng luân phiên hay không. secretsmanager-workshop-scheduled-rotation-success-check Kiểm tra việc luân phiên AWS Secrets Manager secret có thành công theo lịch trình luân phiên hay không. secretsmanager-workshop-using-cmk Kiểm tra xem các secret có được mã hóa bằng AWS KMS Customer Master Key (CMK) hay không. secretsmanager-workshop-secret-unused Kiểm tra xem các secret trong Secrets Manager có được truy cập trong một số ngày nhất định hay không. secretsmanager-workshop-secret-periodic-rotation Kiểm tra xem các secret có được luân phiên trong số ngày được chỉ định gần đây hay không. Bạn có thể xem xét các Config Rule bằng cách thực hiện các bước sau:\nĐiều hướng đến Config Service console.\nNhấp vào \u0026ldquo;Rules\u0026rdquo; từ bảng điều khiển bên trái.\nXem chi tiết Config Rule bằng cách nhấp vào tên Rule.\n"
},
{
	"uri": "//localhost:1313/vi/3/3.2/",
	"title": "Đưa ABAC vào hoạt động",
	"tags": [],
	"description": "",
	"content": "Attribute-based access control (ABAC) là một chiến lược ủy quyền xác định quyền dựa trên các thuộc tính. Trong AWS, các thuộc tính này được gọi là tag. Bạn có thể gắn các tag vào IAM resource, bao gồm IAM entity (user hoặc role) và vào AWS resource. ạn có thể tạo một ABAC duy nhất hoặc một tập hợp nhỏ các policy cho các IAM principal. Các ABAC policy này có thể được thiết kế để cho phép các hoạt động khi tag của principal khớp với tag của tài nguyên. ABAC hữu ích trong các môi trường đang phát triển nhanh chóng và giúp ích cho các tình huống mà việc quản lý policy trở nên phức tạp.\nTrong phần này, bạn sẽ xem xét các policy được gắn với role của hàm Lambda của ứng dụng mẫu và quan sát hành vi sau khi thực hiện thay đổi các tag.\nSteps: Điều hướng đến bảng điều khiển dịch vụ Lambda.\nChọn “Functions” từ bảng điều khiển bên trái. Nhấp vào tên hàm “LambdaRDSTest”.\nNhấp vào Tab “Configuration”.\nChọn “Permissions” từ bảng điều khiển bên trái.\nTrong phần “Execution Role”, bạn sẽ thấy tên Role “LambdaRDSTestRole” được gắn với hàm Lambda.\nNhấp vào “LambdaRDSTestRole”. Thao tác này sẽ đưa bạn đến phần Details của Role trong IAM Management Console.\nTrong Tab Permissions, bạn sẽ thấy 4 chính sách được gắn với Role này.\nXem thử Trust relationships 8. Nhấp vào biểu tượng \u0026ldquo;+\u0026rdquo; bên cạnh “AllowSM” policy.\nQ: Bạn rút ra điều gì từ policy này?\nA: kiểm tra xem thẻ aws:ResourceTag/Event và aws:ResourceTag/Workshop có khớp với các giá trị tương ứng trong thẻ aws:PrincipalTag/Event và aws:PrincipalTag/Workshop hay không. 9. Bây giờ hãy xem xét các Tag cho Role này. Điều hướng đến tab “Tags”.\nBạn nhận thấy các cặp Key-Value nào của Tag?\nĐiều hướng đến bảng điều khiển dịch vụ Secrets Manager.\nNhấp vào secret được tạo bởi CloudFormation template. Tên secret sẽ là “DemoWorkshopSecret“.\nDưới phần “Tags” cho secret, hãy xem xét Tag Values cho các Tag “Event” và “Workshop” và so sánh Tag Key và Tag Value cho các ”LambdaRDSTestRole“ Tag mà bạn đã xem xét ở bước #10 ở trên.\nBạn quan sát thấy gì? Bây giờ nhấp vào “Edit tags” để chỉnh sửa các tag cho “DemoWorkshopSecret” secret. Cập nhật giá trị cho tag “Workshop” thành một giá trị khác (ví dụ: AWSKMSWorkshop). Nhấp vào “Save”. Bạn sẽ thấy một thông báo màu xanh ở trên cùng “Your tags are modified.\u0026quot; Nếu bạn truy cập lại API URL trong trình duyệt web của mình, bạn sẽ thấy một thông báo “Database not connected” làm đầu ra. Q: Tại sao kết nối lại thất bại? A: fail vì khác value trong tag Workshop (phải là AWSSecretsManagerWorkshop)\nThử nghiệm bằng cách cập nhật các Tag của secret thành một kết hợp các giá trị này và quan sát đầu ra từ API URL của ứng dụng. Sửa value tag Workshop thành AmazonGuardDutyWorkshop cũng không kết nối được\nSửa value Event thành conference cũng không kết nối database\nnếu để tag Workshop và Event có value như dưới thì truy vấn database được\n"
},
{
	"uri": "//localhost:1313/vi/5/5.2/",
	"title": "Kiểm tra Quy trình Tự động hóa",
	"tags": [],
	"description": "",
	"content": "Điều kiện tiên quyết::\nNếu chưa hoàn thành, hãy hoàn thành Nhiệm vụ-2.4 trước khi bắt đầu phần này. Các bước thực hiện: Điều hướng đến bảng điều khiển dịch vụ Secrets Manager.\nNhấp vào tên secret “DemoWorkshopSecret”.\nXem xét Resource Permissions của secret.\nNhững entity nào có quyền truy xuất giá trị secret?\nThử truy xuất giá trị secret. Nhấp vào “Retrieve secret value” trong phần Secret value. Q: Bạn có thể xem giá trị secret không? Tại sao có hoặc tại sao không? A: chính sách này từ chối bất kỳ dịch vụ hoặc thực thể AWS nào sử dụng secretsmanager:GetSecretValue trên bất kỳ tài nguyên nào trừ khi ARN của thực thể gọi khớp với một trong các ARN vai trò đã chỉ định\nTrong phần Resource Permissions, nhấp vào “Edit Permissions”. Cập nhật Policy\nXóa tất cả văn bản trong text box. Bạn cũng có thể thực hiện việc này bằng cách chọn tất cả và nhấn phím Backspace.\nNhấp vào “Save”.\nBạn sẽ thấy một thông báo trên màn hình ghi rằng “Deleted resource policy from secret successfully.”:\nBây giờ hãy thử truy xuất giá trị secret sau khi xóa policy. Làm mới trang và nhấp vào “Retrieve secret value” trong phần Secret value.\nBạn có thể xem giá trị secret không? Tại sao có hoặc tại sao không?\nGợi ý: Kiểm tra nội dung của hàm Lambda có tên “UpdateSecretPolicyLambdaFunction”\nKết quả của hành động này:\nBạn sẽ thấy một tin nhắn trong Cổng SNS nêu rằng: \u0026ldquo;The Resource Policy of a secret [the ARN of the secret] was attempted for deletion by [your current IAM Role or User] on [Time Stamp]\u0026rdquo;\nLàm mới API URL cho ứng dụng mẫu của bạn và quan sát các bản cập nhật version ID cho secret. Bạn nhận thấy điều gì?\nĐiều hướng đến secret “DemoWorkshopSecret” một lần nữa trong bảng điều khiển dịch vụ Secrets Manager. .p3 Policy trên giống policy trong lambda UpdateSecretPolicyLambdaFunction sau khi format lại: .p4 Q: Hãy thử xóa Resource Policy lần nữa, điều gì xảy ra?\nA: Không thể xóa (update) resource policy này, là do lambda UpdateSecretPolicyLambdaFunction được trigger, và session user này được gán role DenyUpdateSecretPolicy .p5\nCó thể check bằng Event DeleteResourcePolicy trên CloudTrail: .p5 .p6\n"
},
{
	"uri": "//localhost:1313/vi/5/",
	"title": "Kiểm tra Quy trình Tự động hóa",
	"tags": [],
	"description": "",
	"content": "Điều kiện tiên quyết::\nNếu chưa hoàn thành, hãy hoàn thành Nhiệm vụ-2.4 trước khi bắt đầu phần này. Các bước thực hiện: Điều hướng đến bảng điều khiển dịch vụ Secrets Manager.\nNhấp vào tên secret “DemoWorkshopSecret”.\nXem xét Resource Permissions của secret.\nNhững entity nào có quyền truy xuất giá trị secret?\nThử truy xuất giá trị secret. Nhấp vào “Retrieve secret value” trong phần Secret value. Bạn có thể xem giá trị secret không? Tại sao có hoặc tại sao không?\nTrong phần Resource Permissions, nhấp vào “Edit Permissions”. Cập nhật Policy\nXóa tất cả văn bản trong text box. Bạn cũng có thể thực hiện việc này bằng cách chọn tất cả và nhấn phím Backspace.\nNhấp vào “Save”.\nBạn sẽ thấy một thông báo trên màn hình ghi rằng “Deleted resource policy from secret successfully.”:\nBây giờ hãy thử truy xuất giá trị secret sau khi xóa policy. Làm mới trang và nhấp vào “Retrieve secret value” trong phần Secret value.\nBạn có thể xem giá trị secret không? Tại sao có hoặc tại sao không?\nGợi ý: Kiểm tra nội dung của hàm Lambda có tên “UpdateSecretPolicyLambdaFunction”\nKết quả của hành động này:\nBạn sẽ thấy một tin nhắn trong Cổng SNS nêu rằng: \u0026ldquo;The Resource Policy of a secret [the ARN of the secret] was attempted for deletion by [your current IAM Role or User] on [Time Stamp]\u0026rdquo;\nLàm mới API URL cho ứng dụng mẫu của bạn và quan sát các bản cập nhật version ID cho secret. Bạn nhận thấy điều gì?\nĐiều hướng đến secret “DemoWorkshopSecret” một lần nữa trong bảng điều khiển dịch vụ Secrets Manager. Tại sao bạn lại thấy Resource Policy xuất hiện lại? Hãy thử xóa Resource Policy lần nữa, điều gì xảy ra?\n"
},
{
	"uri": "//localhost:1313/vi/4/4.2/",
	"title": "Tạo SNS Topic và Subscription để nhận thông báo",
	"tags": [],
	"description": "",
	"content": "Trong workshop này, một cổng thông báo SNS bổ sung đã được triển khai trong AWS Account. của bạn. Sử dụng cổng này, bạn có thể xem các thông báo được tạo ra cho các sự kiện mà bạn sẽ cấu hình trong EventBridge Rules. Bây giờ, bạn sẽ cấu hình SNS Topic để đăng ký với cổng thông báo.\nCác bước thực hiện: Điều hướng đến Simple Notification Service console.\nNhấp vào “Topics” từ bảng điều khiển bên trái.\nNhấp vào “Create topic”.\nChọn “Standard”.\nNhập tên topic mà bạn chọn, ví dụ: “ASMWorkshopTopic”.\nNhấp vào “Create topic”.\nKhi Topic được tạo thành công, bạn sẽ thấy một thông báo thành công màu xanh ở đầu màn hình.\nNhấp vào “Create subscription”.\nChọn \u0026ldquo;AWS Lambda\u0026rdquo; từ danh sách Protocol.\nThay thế các tham số [AWS-REGION] và [ACCOUNT-ID] bằng AWS Region hiện tại và AWS Account ID của bạn trong chuỗi ARN:\narn:aws:lambda:[AWS-REGION]:[ACCOUNT-ID]:function:SNSPortalLambdaFunction\nVí dụ nếu bạn đang sử dụng us-east-1 region và Account ID của bạn là 111122223333, ARN sẽ là:\narn:aws:lambda:us-east-1:111122223333:function:SNSPortalLambdaFunction\nBạn có thể sao chép số tài khoản bằng cách mở rộng menu thả xuống từ góc trên bên phải.\nSao chép chuỗi ARN đã cập nhật vào ô \u0026ldquo;Endpoint\u0026rdquo;.\nNhấp vào “Create subscription”. Khi Subscription được tạo thành công, bạn sẽ thấy một thông báo thành công màu xanh ở đầu màn hình.\n"
},
{
	"uri": "//localhost:1313/vi/2/",
	"title": "Thiết Lập Môi Trường",
	"tags": [],
	"description": "",
	"content": "Trong module này, CloudFormation template đã được triển khai để tạo các tài nguyên sau:\nCấu hình VPC cho ứng dụng mẫu Customer Managed Key (CMK) trong AWS KMS thử nghiệm Amazon RDS MySQL Database Instance thử nghiệm Secret chứa thông tin đăng nhập cho Amazon RDS MySQL Database Instance thử nghiệm Hàm Lambda cho ứng dụng mẫu Các hàm Lambda để khởi tạo và nạp dữ liệu vào cơ sở dữ liệu cho ứng dụng mẫu API Gateway để truy cập ứng dụng mẫu Hàm Lambda luân phiên secret cho Cơ sở dữ liệu RDS MySQL Hàm Lambda khắc phục sự cố cho quy trình làm việc Ứng phó sự cố Sau khi hoàn thành Module này, việc triển khai sẽ bao gồm các tài nguyên sau: "
},
{
	"uri": "//localhost:1313/vi/3/",
	"title": "Cập nhật Ứng dụng Mẫu",
	"tags": [],
	"description": "",
	"content": "Trong module này, bạn sẽ cập nhật ứng dụng mẫu của mình để truy xuất thông tin xác thực từ AWS Secrets Manager. Bạn có thể sử dụng phần minh họa này để hiểu cách lập trình để truy xuất các secret trong ứng dụng mà không cần con người nhìn thấy các giá trị plaintext secret. Bạn cũng sẽ thấy cách sử dụng các AWS IAM PrincipalTag và ResourceTag condition key để triển khai attribute-based access control (ABAC).\nModule này có 2 nhiệm vụ:\nNhiệm vụ-1.1: Cập nhật ứng dụng mẫu để truy xuất thông tin xác thực của cơ sở dữ liệu từ AWS Secrets Manager Nhiệm vụ-1.2: Đưa ABAC vào hoạt động "
},
{
	"uri": "//localhost:1313/vi/4/4.3/",
	"title": "Tạo Amazon EventBridge Event Rule",
	"tags": [],
	"description": "",
	"content": "Các bước thực hiện Điều hướng đến bảng điều khiển dịch vụ Amazon EventBridge.\nNhấp vào “Create rule”.\nNhập tên cho Event Rule theo ý của bạn, ví dụ: MonitorSecretsConfig.\nNhấp vào \u0026ldquo;Next\u0026rdquo;.\nCuộn xuống phần “Event pattern”:\na. Dưới mục “Event source”, chọn “AWS services”.\nb. Dưới mục “AWS service”, chọn “Config” từ danh sách.\nc. Dưới mục “Event type”, chọn “Config Rules Compliance Change” từ danh sách.\nd. Chọn “Any message type”.\ne. Chọn “Specific rule name(s)” và\nNhập tên config rule secretsmanager-workshop-scheduled-rotation-success-check vào text-box. Nhấp vào ”Add“. Nhập tên config rule secretsmanager-workshop-rotation-enabled-check vào text-box mới. Nhấp vào ”Add“. Nhập tên config rule secretsmanager-workshop-using-cmk vào text-box mới. Nhấp vào ”Add“. Nhập tên config rule secretsmanager-workshop-secret-periodic-rotation vào text-box mới. Nhấp vào ”Add“. Nhập tên config rule secretsmanager-workshop-secret-unused vào text-box mới. f. Chọn “Any resource type”. g. Chọn “Any resource ID”.\nNhấp vào \u0026ldquo;Next\u0026rdquo;.\nTrong bước “Select target(s)”, chọn “SNS topic” từ danh sách thả xuống cho Target 1 và sau đó chọn tên của SNS topic đã được tạo trong Nhiệm vụ-2.4, ví dụ: \u0026ldquo;ASMWorkshopTopic\u0026rdquo;.\nMở rộng \u0026ldquo;Additional settings\u0026rdquo; và chọn \u0026ldquo;Input transformer\u0026rdquo; từ menu thả xuống.\nNhấp vào \u0026ldquo;Configure input transformer\u0026rdquo;.\nCuộn xuống phần \u0026ldquo;Target input transformer\u0026rdquo;, và dán nội dung sau vào \u0026ldquo;Input path\u0026rdquo; textbox.\n{\u0026#34;resource\u0026#34;:\u0026#34;$.detail.resourceId\u0026#34;,\u0026#34;compliance\u0026#34;:\u0026#34;$.detail.newEvaluationResult.complianceType\u0026#34;,\u0026#34;rule\u0026#34;:\u0026#34;$.detail.configRuleName\u0026#34;,\u0026#34;time\u0026#34;:\u0026#34;$.detail.newEvaluationResult.resultRecordedTime\u0026#34;} Dán nội dung sau vào \u0026ldquo;Template\u0026rdquo; textbox. \u0026quot;The compliance state of secret \u0026lt;resource\u0026gt; for rule \u0026lt;rule\u0026gt; has changed to \u0026lt;compliance\u0026gt; at \u0026lt;time\u0026gt;.\u0026quot;\nNhấp vào \u0026ldquo;Confirm\u0026rdquo;.\nNhấp vào \u0026ldquo;Next\u0026rdquo; và tiếp tục nhấp \u0026ldquo;Next\u0026rdquo; để bỏ qua bước \u0026ldquo;Configure tags\u0026rdquo;.\nCuộn xuống và nhấp vào \u0026ldquo;Create rule\u0026rdquo;. Sau khi Rule được tạo, bạn sẽ thấy một thông báo màu xanh lá cây xuất hiện ở trên cùng của màn hình.\nXem lại: .a Kết quả: .b Xem EventBridge Rule: - Event partern: ,c .d\n"
},
{
	"uri": "//localhost:1313/vi/4/4.4/",
	"title": "Bật chức năng luân phiên Secret",
	"tags": [],
	"description": "",
	"content": "Trước khi bật chức năng luân phiên Secret:\nTruy cập API URL của ứng dụng mẫu trong một tab trình duyệt riêng. Bạn có thể tìm thấy API URL trong bảng điều khiển Event Engine của mình. Lưu ý giá trị của các Version ID cho các nhãn AWSPREVIOUS và AWSCURRENT. Secrets Manager gán nhãn phiên bản hiện tại đang hoạt động và được sử dụng của secret là AWSCURRENT. Mỗi khi nhãn AWSCURRENT huyển từ phiên bản này sang phiên bản khác, Secrets Manager tự động di chuyển nhãn AWSPREVIOUS đến phiên bản trước đó được gán nhãn AWSCURRENT. Để đọc thêm về cách AWS Secrets Manager luân phiên secret, hãy tham khảo tài liệu tại đây.\nTruy cập cổng nhận thông báo SNS trong một tab trình duyệt riêng. Để truy cập cổng, chỉ cần thêm snsportal vào cuối liên kết API URL của bạn. Ví dụ:\nKhông đóng tab trình duyệt cổng SNS cho đến khi kết thúc workshop. Bạn sẽ sử dụng nó để xem các tin nhắn thông báo SNS.\nSau đó bật chức năng luân phiên Secret bằng các bước sau:\nĐiều hướng đến bảng điều khiển dịch vụ Secrets Manager.\nNhấp vào secret được tạo bởi CloudFormation template. Tên secret sẽ là “DemoWorkshopSecret”.\nTrong phần “Rotation configuration”, nhấp vào “Edit rotation”.\nChuyển đổi sang “Automatic rotation”.\nDưới “Rotation schedule”, nhập số ngày mà secret này sẽ được luân phiên. Ví dụ: 30 ngày.\nDưới “Rotation function”, chọn hàm có tên “SecretsManagerMySQLRotationLambda”.\nNhấp vào “Save”.\nTại thời điểm này, bạn sẽ thấy thông báo màu xanh lá cây ở đầu màn hình “Rotating your secret DemoWorkshopSecret”\nChờ vài phút và chú ý các tin nhắn trong cổng SNS.\nTruy cập lại API URL của ứng dụng mẫu và quan sát giá trị của các Version ID AWSPREVIOUS và AWSCURRENT.\nLưu ý rằng phiên bản AWSCURRENT sẽ trở thành phiên bản AWSPREVIOUS.\nBạn cũng có thể kiểm tra ứng dụng khi secret được lên lịch để luân phiên bằng cách nhấp vào “Rotate secret immediately”. Sau đó truy cập liên kết API URL của ứng dụng sau khi bạn thấy thông báo thành công màu xanh lá cây ở đầu màn hình.\nTest rotate: .a Vẫn fail trong sns portal: .b debug: phát hiện chọn sai Event Type: .c Sau khi chuyển lại key thành AWSSecretsManagerWorkshopKey: .d\nLambda này ghi log vào DynamoDB table: .e .f\nTruy cập lại API URL. Bây giờ phiên bản AWSCURRENT sẽ trở thành phiên bản AWSPREVIOUS: g\n"
},
{
	"uri": "//localhost:1313/vi/4/",
	"title": "Quản lý session logs",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/vi/4/4.5/",
	"title": "Kiểm tra Secret CMK Compliance",
	"tags": [],
	"description": "",
	"content": "Các bước thực hiện: Điều hướng đến bảng điều khiển dịch vụ Secrets Manager.\nNhấp vào secret đã được tạo bởi CloudFormation template triển khai trong Module-0. Tên của secret sẽ là \u0026ldquo;DemoWorkshopSecret\u0026rdquo;.\nTrong phần “Secret details”, nhấp vào “Edit encryption key” từ menu thả xuống “Actions”:\nChọn “aws/secretsmanager”.\nBỏ chọn tùy chọn “Create new version of secret with new encryption key”.\nLƯU Ý: Để phục vụ mục đích trình bày trong workshop này, tùy chọn này không được chọn. Đây KHÔNG phải là biện pháp bảo mật tốt nhất cho môi trường sản xuất. Trong môi trường sản xuất, bạn nên chọn tùy chọn này để tạo phiên bản mới của secret với khóa mã hóa mới.\nNhấp vào “Save”. Bạn sẽ thấy một thông báo cập nhật thành công màu xanh lá cây ở đầu màn hình. Chuyển thành NON_COMPLIANT: .b 7. Bây giờ quay lại Encryption Key cho CMK bí danh \u0026ldquo;AWSSecretsManagerWorkshopKey\u0026rdquo;. CMK này đã được tạo bởi CloudFormation template trong module-0.\nBỏ chọn tùy chọn “Create new version of secret with new encryption key”.\nNhấp vào “Save”. Bạn sẽ thấy một thông báo cập nhật thành công màu xanh lá cây ở đầu màn hình.\nChờ vài phút và lưu ý các thông báo trong Cổng SNS.\n"
},
{
	"uri": "//localhost:1313/vi/6/",
	"title": "Dọn dẹp tài nguyên  ",
	"tags": [],
	"description": "",
	"content": "Chúng ta sẽ tiến hành các bước sau để xóa các tài nguyên chúng ta đã tạo trong bài thực hành này.\nXóa EC2 instance Truy cập giao diện quản trị dịch vụ EC2 Click Instances. Click chọn cả 2 instance Public Linux Instance và Private Windows Instance. Click Instance state. Click Terminate instance, sau đó click Terminate để xác nhận. Truy cập giao diện quản trị dịch vụ IAM Click Roles. Tại ô tìm kiếm , điền SSM. Click chọn SSM-Role. Click Delete, sau đó điền tên role SSM-Role và click Delete để xóa role. Click Users. Click chọn user Portfwd. Click Delete, sau đó điền tên user Portfwd và click Delete để xóa user. Xóa S3 bucket Truy cập giao diện quản trị dịch vụ System Manager - Session Manager. Click tab Preferences. Click Edit. Kéo chuột xuống dưới. Tại mục S3 logging. Bỏ chọn Enable để tắt tính năng logging. Kéo chuột xuống dưới. Click Save. Truy cập giao diện quản trị dịch vụ S3 Click chọn S3 bucket chúng ta đã tạo cho bài thực hành. ( Ví dụ : lab-fcj-bucket-0001 ) Click Empty. Điền permanently delete, sau đó click Empty để tiến hành xóa object trong bucket. Click Exit. Sau khi xóa hết object trong bucket, click Delete Điền tên S3 bucket, sau đó click Delete bucket để tiến hành xóa S3 bucket. Xóa các VPC Endpoint Truy cập vào giao diện quản trị dịch vụ VPC Click Endpoints. Chọn 4 endpoints chúng ta đã tạo cho bài thực hành bao gồm SSM, SSMMESSAGES, EC2MESSAGES, S3GW. Click Actions. Click Delete VPC endpoints. Tại ô confirm , điền delete. Click Delete để tiến hành xóa các endpoints. Click biểu tượng refresh, kiểm tra tất cả các endpoints đã bị xóa trước khi làm bước tiếp theo. Xóa VPC Truy cập vào giao diện quản trị dịch vụ VPC Click Your VPCs. Click chọn Lab VPC. Click Actions. Click Delete VPC. Tại ô confirm, điền delete để xác nhận, click Delete để thực hiện xóa Lab VPC và các tài nguyên liên quan. "
},
{
	"uri": "//localhost:1313/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]
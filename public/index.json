[
{
	"uri": "//localhost:1313/",
	"title": "Threat Detection &amp; Response Workshop",
	"tags": [],
	"description": "",
	"content": "Security Architects are looking to reduce access to plaintext secrets by their application teams. Developers want a mechanism to securely retrieve secrets without hard-coding credentials in their application. They also want assurance that rotation of secrets will not affect application availability. Compliance teams want mechanisms to monitor security of the secrets and aligning with best practices or policy. Finally the SOC want mechanisms to respond to unauthorized or erroneous actions on secrets.\nIn this workshop, you will use a sample serverless application with AWS Lambda functions connecting to an Amazon RDS database. You will test programmatic retrieval of database credentials from AWS Secrets Manager as well as implement Attribute-based Access Control (ABAC) using tags. You will monitor compliance status of secrets using AWS Config. Later you will rotate secrets within AWS Secrets Manager and test application access. Finally you will test attempts to delete the secrets resource policy for retrieving secrets in plaintext from AWS Secrets Manager. Attendees will use AWS Event Bridge event driven response to deploy incident response workflows that will rotate the secret, restore the resource policy, alert the SOC, and deny access to the offender.\nScenario You are working at a company who is moving towards storing their credentials in AWS Secrets Manager. Rather than applications using hard-coded credentials, developers will use Secrets Manager to retrieve the Database credentials for connecting to the database.\nWe will assume that the organization\u0026rsquo;s security requirements state:\nAll secrets must be encrypted at rest using Customer Managed Keys All secret modification or retrieval attempts by unauthorized users must notify Admins and SOC. Trigger incident response automation to rotate the secret and reduce unauthorized user\u0026rsquo;s privilege profile. In this workshop, you will wear two hats. First, you will wear the Administrator hat to deploy the configuration to manage the secrets stored in Secrets Manager. Second, you will wear the Developer hat to configure your application for requesting database credentials from Secrets Manager instead of using hard-coded credentials. You will also test the Incident Response configuration that you put in place for remediating against Secret update and retrieval workflow.\nThe sample application is a Lambda function “LambdaRDSTest” which is initially using Hard-coded environment variables to connect with the Demo MySQL RDS DB Instance.\nYou will use the secret created in AWS Secrets Manager in your sample application to retrieve the DB credentials from AWS Secrets Manager instead of using Hard-coded Environment variables.\nYou will also create an automated workflow for Detecting, Alerting and Responding to secret policy deletion and compliance changes for secrets in AWS Secrets Manager.\nModules This workshop is broken up into setup and then four modules:\nModule-0: Environment Setup Module-1: Retrieving secrets and implementing access control for secrets stored in AWS Secrets Manager Module-2: Monitor compliance of secrets Module-3: Automation of Incident Response workflows Module-4: Recap and summary "
},
{
	"uri": "//localhost:1313/5/5.1/",
	"title": "Create an Amazon EventBridge Event Rule",
	"tags": [],
	"description": "",
	"content": "Pre-requisites:\nIf not completed already, complete Task-2.2 before starting this section. Steps:\nNavigate to the Amazon EventBridge Service console .\nSelect “Rules\u0026quot; from the left panel and click “Create rule”.\nEnter the Name for the Event Rule of your choice, e.g. “DeleteSecretResourcePolicyRule”.\nClick \u0026ldquo;Next\u0026rdquo;.\nScroll down to the “Event pattern” section and select “Custom patterns (JSON editor)”.\nPaste the following pattern in the “Event pattern” textbox:\n{\r\u0026#34;source\u0026#34;: [\r\u0026#34;aws.secretsmanager\u0026#34;\r],\r\u0026#34;detail-type\u0026#34;: [\r\u0026#34;AWS API Call via CloudTrail\u0026#34;\r],\r\u0026#34;detail\u0026#34;: {\r\u0026#34;eventSource\u0026#34;: [\r\u0026#34;secretsmanager.amazonaws.com\u0026#34;\r],\r\u0026#34;eventName\u0026#34;: [\r\u0026#34;DeleteResourcePolicy\u0026#34;\r]\r}\r} It should look like:\nClick \u0026ldquo;Next\u0026rdquo;.\nUnder “Select target(s)” step, choose “Lambda function” from the drop down list for Target 1.\nSelect the function named “UpdateSecretPolicyLambdaFunction” and click “Add another target”.\nChoose “SNS topic” from the first drop down list and the name of the SNS topic “ASMWorkshopTopic“ (that you created in Task-2.2) in the second drop down list.\nExpand \u0026ldquo;Additional settings\u0026rdquo; and select \u0026ldquo;Input transformer\u0026rdquo; under the drop down menu.\nClick \u0026ldquo;Configure input transformer\u0026rdquo;.\nScroll down to \u0026ldquo;Target input transformer\u0026rdquo; section, and paste the following under \u0026ldquo;Input path\u0026rdquo; textbox:\n{\u0026#34;AccessingParty\u0026#34;:\u0026#34;$.detail.userIdentity.arn\u0026#34;,\u0026#34;EventTime\u0026#34;:\u0026#34;$.detail.eventTime\u0026#34;,\u0026#34;Secret\u0026#34;:\u0026#34;$.detail.responseElements.aRN\u0026#34;} Paste the following under \u0026ldquo;Template\u0026rdquo; textbox.\n\u0026#34;The Resource Policy of a secret \u0026lt;Secret\u0026gt; was attempted for deletion by \u0026lt;AccessingParty\u0026gt; on \u0026lt;EventTime\u0026gt;. \u0026#34; Click \u0026ldquo;Confirm\u0026rdquo;.\nClick \u0026ldquo;Next\u0026rdquo; and continue to click \u0026ldquo;Next\u0026rdquo; to skip the \u0026ldquo;Configure tags\u0026rdquo; step.\nScroll down and click “Create rule\u0026quot;. Once the Rule is created, you will see a green banner at the top of the screen:\n"
},
{
	"uri": "//localhost:1313/4/4.1/",
	"title": "Review AWS Config Rules for Secrets Manager",
	"tags": [],
	"description": "",
	"content": "Five Config rules for checking compliance for secrets stored in AWS Secrets Manager have already been created for this workshop:\nsecretsmanager-workshop-rotation-enabled-check Checks whether AWS Secrets Manager secret has rotation enabled. secretsmanager-workshop-scheduled-rotation-success-check Checks whether AWS Secrets Manager secret rotation has rotated successfully as per the rotation schedule. secretsmanager-workshop-using-cmk Checks if secrets are encrypted using an AWS KMS Customer Master Key (CMK). secretsmanager-workshop-secret-unused Checks if Secrets Manager accessed secrets within a specified number of days. secretsmanager-workshop-secret-periodic-rotation Checks if secrets have been rotated within the past specified number of days. You can review the Config Rules by following these Steps:\nNavigate to Config Service console.\nClick \u0026ldquo;Rules\u0026rdquo; from the left panel.\nReview the Config Rule details by clicking on the Rule name.\n"
},
{
	"uri": "//localhost:1313/3/3.1/",
	"title": "Update Sample Application",
	"tags": [],
	"description": "",
	"content": "Update Sample Application to retrieve database credentials from AWS Secrets Manager Steps: Update Sample Application to retrieve database credentials from AWS Secrets Manager\nNavigate to the Lambda service console.\nSelect “Functions” from the left panel. Click on the “LambdaRDSTest” function name. This is the function that is used for the sample application to connect to the RDS Database. The function is written in Python language. The Database contains sample data about First Names and the Last Names.\nYou can review the code for the sample application by double clicking on “LambdaRDSTest.py” in the “Code Source” section.\nThe function openConnection() within the code connects to the MySQL RDS DB using the parameters that are stored in the Environment Variables. When the Database is connected, application will print the sample data.\nPaste and access the API URL that you copied earlier (in the CloudFormation stack\u0026rsquo;s Event Outputs section) in a separate web browser tab. You should see a Database not connected message Why wasn\u0026#39;t the application able to connect to the RDS database for retrieving the sample data? Now, let’s update application “LambdaRDSTest” code to retrieve the Database credentials from the Secrets Manager instead of using Environment Variables. Return to the browser tab where the LambdaRDSTest.py code is opened. a. Comment the following 4 lines in the code (lines number 15, 16, 17, 18) by inserting a # in the beginning of each line as shown below.\nb. Under “Configuration” click on “Environment variables”. You will see Environment Variables similar to below:\nc. Delete all the Key Value pairs for the Environment Variables:\nGo back to the source code under Code Source section:\nClick “Deploy” to save the changes and wait until the following message appears:\nNavigate to Secrets Manager service console .\nClick on the secret that was created by the CloudFormation template. The secret name will be “DemoWorkshopSecret“.\nScroll down to the “Sample code” section. Click on “Python3”\nSelect and Copy the code from line # 11 to line # 34.\nNote: Python is an indent sensitive language, it’s important to indent the code correctly. Make sure you select the sample code from line # 11, otherwise it can lead to indentation issues.\nReturn to the browser tab where the LambdaRDSTest Lambda function code is opened.\nTraverse to line # 24 in the code and press Enter at the end of the line:\nPaste the sample code that you copied from Secrets Manager.\nSecrets Manager returns the DB Credentials as a string. You will now add code to extract the connection parameters for connecting to the Database from the returned string. To save time for this workshop, the code block is already added in the sample Lambda function:\nsecretstring = json.loads(secret)\rrds_host = secretstring[\u0026#39;host\u0026#39;]\rusername = secretstring[\u0026#39;username\u0026#39;]\rpassword = secretstring[\u0026#39;password\u0026#39;]\rdb_name = secretstring[\u0026#39;dbname\u0026#39;] To use it, you will just need to un-comment the lines (remove # from the start of the line) of codes in the Lambda function.\nVerify that the modified code should be similar to this: At this point, the application is configured to make a database connection using the retrieved credentials from the secret in AWS Secrets Manager. The pymysql.connect command uses the retrieved credentials from the secret.\nClick “Deploy” to save the changes and wait until the following message appears:\nAccess the API URL again in your web browser, you should be able to see the sample data retrieved from the database similar to this:\nThe output displays the sample data as well as Version ID’s of the secret. When the CloudFormation template is deployed, the secret is updated after it’s first created.\nYou can observe in the lambda function code that an API call describe_secret is made when the connection to the Database is opened:\nget_describe_secret_response = client.describe_secret(SecretId=secret_name)\n"
},
{
	"uri": "//localhost:1313/1-instructions/",
	"title": "Workshop Instructions",
	"tags": [],
	"description": "",
	"content": "Security Architects are looking to reduce access to plaintext secrets by their application teams. Developers want a mechanism to securely retrieve secrets without hard-coding credentials in their application. They also want assurance that rotation of secrets will not affect application availability. Compliance teams want mechanisms to monitor security of the secrets and aligning with best practices or policy. Finally the SOC want mechanisms to respond to unauthorized or erroneous actions on secrets.\nIn this workshop, you will use a sample serverless application with AWS Lambda functions connecting to an Amazon RDS database. You will test programmatic retrieval of database credentials from AWS Secrets Manager as well as implement Attribute-based Access Control (ABAC) using tags. You will monitor compliance status of secrets using AWS Config. Later you will rotate secrets within AWS Secrets Manager and test application access. Finally you will test attempts to delete the secrets resource policy for retrieving secrets in plaintext from AWS Secrets Manager. Attendees will use AWS Event Bridge event driven response to deploy incident response workflows that will rotate the secret, restore the resource policy, alert the SOC, and deny access to the offender.\nScenario You are working at a company who is moving towards storing their credentials in AWS Secrets Manager. Rather than applications using hard-coded credentials, developers will use Secrets Manager to retrieve the Database credentials for connecting to the database.\nWe will assume that the organization\u0026rsquo;s security requirements state:\nAll secrets must be encrypted at rest using Customer Managed Keys All secret modification or retrieval attempts by unauthorized users must notify Admins and SOC. Trigger incident response automation to rotate the secret and reduce unauthorized user\u0026rsquo;s privilege profile. In this workshop, you will wear two hats. First, you will wear the Administrator hat to deploy the configuration to manage the secrets stored in Secrets Manager. Second, you will wear the Developer hat to configure your application for requesting database credentials from Secrets Manager instead of using hard-coded credentials. You will also test the Incident Response configuration that you put in place for remediating against Secret update and retrieval workflow.\nThe sample application is a Lambda function “LambdaRDSTest” which is initially using Hard-coded environment variables to connect with the Demo MySQL RDS DB Instance.\nYou will use the secret created in AWS Secrets Manager in your sample application to retrieve the DB credentials from AWS Secrets Manager instead of using Hard-coded Environment variables.\nYou will also create an automated workflow for Detecting, Alerting and Responding to secret policy deletion and compliance changes for secrets in AWS Secrets Manager.\nModules This workshop is broken up into setup and then four modules:\nModule-0: Environment Setup Module-1: Retrieving secrets and implementing access control for secrets stored in AWS Secrets Manager Module-2: Monitor compliance of secrets Module-3: Automation of Incident Response workflows Module-4: Recap and summary "
},
{
	"uri": "//localhost:1313/4/4.2/",
	"title": "Create SNS Topic and Subscription for receiving notifications",
	"tags": [],
	"description": "",
	"content": "For this workshop, a complimentry SNS notification receiving portal is deployed in your AWS Account. Using this portal you can view the notifications that are generated for the events that you will configure in the EventBridge Rules. You will now configure the SNS Topic to subscribe to the portal application.\nSteps: Navigate to the Simple Notification Service console.\nClick “Topics” from the left panel.\nClick “Create topic”.\nSelect “Standard”.\nEnter the topic name of your choice e.g. “ASMWorkshopTopic”.\nClick “Create topic”.\nWhen the Topic is created successfully, you will see a green banner on the top of the screen stating the success message.\nClick “Create subscription”.\nSelect \u0026ldquo;AWS Lambda\u0026rdquo; from the Protocol drop down list.\nReplace the [AWS-REGION] and [ACCOUNT-ID] parameters with your current AWS Region and AWS Account ID in the ARN string:\narn:aws:lambda:[AWS-REGION]:[ACCOUNT-ID]:function:SNSPortalLambdaFunction\nAs an example if you are using us-east-1 region and your Account ID is 111122223333, the ARN will be:\narn:aws:lambda:us-east-1:111122223333:function:SNSPortalLambdaFunction You can copy the account number by expanding the drop down menu from the top right corner.\nCopy the updated ARN string in the \u0026ldquo;Endpoint\u0026rdquo; text box.\nClick “Create subscription”.\nWhen the Subscription is created successfully, you will see a green banner on the top of the screen stating the success message.\n"
},
{
	"uri": "//localhost:1313/2/",
	"title": "Module-0: Environment Setup",
	"tags": [],
	"description": "",
	"content": "In this module, the CloudFormation template has been deployed to create the following resources:\nVPC Configuration for sample application Demo Customer Managed Key (CMK) in AWS KMS Demo Amazon RDS MySQL Database Instance Secret with database credentials for the Demo Amazon RDS MySQL Database Instance Lambda function for the sample application Lambda functions to initialize and populate the database with data for sample application API Gateway for accessing the sample application Rotation Lambda function to rotate secrets for RDS MySQL Database Remediation Lambda function for Incident Response workflow By the end of this Module, the deployment includes the following resources: "
},
{
	"uri": "//localhost:1313/3/3.2/",
	"title": "Putting ABAC into Action",
	"tags": [],
	"description": "",
	"content": "Attribute-based access control (ABAC) is an authorization strategy that defines permissions based on attributes. In AWS, these attributes are called tags. You can attach tags to IAM resources, including IAM entities (users or roles) and to AWS resources. You can create a single ABAC policy or small set of policies for your IAM principals. These ABAC policies can be designed to allow operations when the principal\u0026rsquo;s tag matches the resource tag. ABAC is helpful in environments that are growing rapidly and helps with situations where policy management becomes cumbersome.\nIn this section, you will review the policies attached to the sample application Lambda function role and observe the behavior after making changes to the tags.\nSteps: Navigate to the Lambda service console.\nSelect “Functions” from the left panel. Click on the “LambdaRDSTest” function name.\nClick on the “Configuration\u0026rsquo;” Tab.\nClick on “Permissions” from the left panel.\nIn the “Execution Role” section, you will see a Role name “LambdaRDSTestRole” that is attached to the Lambda function.\nClick on “LambdaRDSTestRole”. This action will take you to the Role details in the IAM Management Console.\nIn the Permissions Tab, you will notice 4 policies that are attached to this Role.\nClick on the \u0026ldquo;+\u0026rdquo; symbol beside the “AllowSM” policy.\nWhat do you infer from the policy?\nNow let’s review the Tags for this Role. Navigate to the “Tags” tab. What Tag Key-Value pairs do you notice?\nNavigate to Secrets Manager service console.\nClick on the secret that was created by the CloudFormation template. The secret name will be “DemoWorkshopSecret“.\nUnder the “Tags” section for the secret, review the Tag Values for the Tags “Event” and “Workshop” and compare the Tag Key and Tag Value for the ”LambdaRDSTestRole“ Tags that you reviewed in step # 10 above.\nWhat do you observe?\nNow click on “Edit tags” to edit the tags for the “DemoWorkshopSecret” secret. Update the value for the tag “Workshop” to another value (e.g. AWSKMSWorkshop).\nClick “Save”. You will see a green banner on the top stating “Your tags are modified.\u0026quot;\nIf you access the API URL again in your web browser, you will see a message “Database not connected” as an output.\nWhy did the connection fail?\nExperiment by updating the Tags of the secret to a combination of these values and observe the output from the application API URL. "
},
{
	"uri": "//localhost:1313/5/5.2/",
	"title": "Test Automation Workflow",
	"tags": [],
	"description": "",
	"content": "Pre-requisites:\nIf not completed already, complete Task-2.4 before starting this section. Steps:\nNavigate to the Secrets Manager Service console .\nClick on the secret name “DemoWorkshopSecret”.\nReview the Resource Permissions of the secret.\nWhich entities have access to retrieve the secret value?\nTry to retrieve the secret value. Click “Retrieve secret value” in the Secret value section.\nAre you able to view the secret value? Why or why not?\nWithin the Resource Permissions section, click “Edit Permissions”. Policy update\nClick inside the text box area and delete all the text from the box. You can also do this by select+all and backspace.\nClick “Save”.\nYou should see a banner on the screen stating “Deleted resource policy from secret successfully.”:\nNow try to retrieve the secret value after deleting the policy. Refresh the page and click “Retrieve secret value” in the Secret value section.\nAre you able to view the secret value? Why or why not?\nHint: Check the contents of the Lambda function named “UpdateSecretPolicyLambdaFunction”\nAs a result of this action:\nYou will see a message in the SNS Portal stating that:\n\u0026ldquo;The Resource Policy of a secret [the ARN of the secret] was attempted for deletion by [your current IAM Role or User] on [Time Stamp]\u0026rdquo;\nRefresh the API URL for your sample application and observe the version ID updates for the secret.\nWhat do you observe?\nNavigate to the secret “DemoWorkshopSecret” again in Secrets Manager Service console\nWhy do you see the Resource Policy again? Attempt to delete the Resource Policy again, what happens?\n"
},
{
	"uri": "//localhost:1313/4/4.3/",
	"title": "Create Amazon EventBridge Event Rule",
	"tags": [],
	"description": "",
	"content": "Navigate to the Amazon EventBridge Service console .\nClick “Create rule”.\nEnter the Name for the Event Rule of your choice, e.g. MonitorSecretsConfig.\nClick \u0026ldquo;Next\u0026rdquo;.\nScroll down to the “Event pattern” section:\na. Under “Event source”, select “AWS services”.\nb. Under “AWS service”, choose “Config” from the list.\nc. Under “Event type”, choose “Config Rules Compliance Change” from the list.\nd. Select “Any message type”.\ne. Select “Specific rule name(s)” and\nEnter the config rule name secretsmanager-workshop-scheduled-rotation-success-check in the text-box. Click ”Add“. Enter the config rule name secretsmanager-workshop-rotation-enabled-check in the new text-box. Click ”Add“. Enter the config rule name secretsmanager-workshop-using-cmk in the new text-box. Click ”Add“. Enter the config rule name secretsmanager-workshop-secret-periodic-rotation in the new text-box. Click ”Add“. Enter the config rule name secretsmanager-workshop-secret-unused in the new text-box. f. Select “Any resource type”. g. Select “Any resource ID”.\nIt will look like this:\nClick \u0026ldquo;Next\u0026rdquo;.\nUnder “Select target(s)” step, choose “SNS topic” from the drop down list for Target 1 and then select the name of the SNS topic that was created in Task-2.4 e.g. \u0026ldquo;ASMWorkshopTopic\u0026rdquo;.\nExpand \u0026ldquo;Additional settings\u0026rdquo; and select \u0026ldquo;Input transformer\u0026rdquo; under the drop down menu.\nClick \u0026ldquo;Configure input transformer\u0026rdquo;.\nScroll down to \u0026ldquo;Target input transformer\u0026rdquo; section, and paste the following under \u0026ldquo;Input path\u0026rdquo; textbox.\n{\u0026#34;resource\u0026#34;:\u0026#34;$.detail.resourceId\u0026#34;,\u0026#34;compliance\u0026#34;:\u0026#34;$.detail.newEvaluationResult.complianceType\u0026#34;,\u0026#34;rule\u0026#34;:\u0026#34;$.detail.configRuleName\u0026#34;,\u0026#34;time\u0026#34;:\u0026#34;$.detail.newEvaluationResult.resultRecordedTime\u0026#34;} Click \u0026ldquo;Confirm\u0026rdquo;.\nClick \u0026ldquo;Next\u0026rdquo; and continue to click \u0026ldquo;Next\u0026rdquo; to skip the \u0026ldquo;Configure tags\u0026rdquo; step.\nScroll down and click \u0026ldquo;Create rule\u0026rdquo;. Once the Rule is created, you will see a Green banner on the top of screen.\n"
},
{
	"uri": "//localhost:1313/3/",
	"title": "Update Sample Application",
	"tags": [],
	"description": "",
	"content": "In this module you will update your sample application to retrieve credentials from AWS Secrets Manager. You can use this demonstration to understand how to programmatically retrieve secrets in an application without humans seeing plaintext secret values. You will also see how to use AWS IAM PrincipalTag and ResourceTag condition keys to implement attribute-based access control (ABAC).\nThis module has 2 tasks:\nTask-1.1: Update sample application to retrieve database credentials from AWS Secrets Manager Task-1.2: Putting ABAC into action "
},
{
	"uri": "//localhost:1313/4/4.4/",
	"title": "Enable Secret Rotation",
	"tags": [],
	"description": "",
	"content": "Before you enable Secret rotation:\nAccess the sample application API URL in a separate browser tab. You can find the API URL in your Event Engine dashboard. Note the value of the Version IDs for the labels AWSPREVIOUS and AWSCURRENT. Secrets Manager labels the currently active and in-use version of the secret with AWSCURRENT. Any time the label AWSCURRENT moves from one version to another, Secrets Manager automatically moves the staging label AWSPREVIOUS to the version previously labeled AWSCURRENT. To read more about how AWS Secrets Manager rotates secret, refer to the documentation here .\nAccess the SNS notification receiving portal in a separate browser tab. To access the portal, just append snsportal at the end of your API URL link. As an example:\nDo not close the SNS portal browser tab until the end of the workshop. You will use it to view the SNS notification messages.\nThen Enable the Secret Rotation using following steps:\nNavigate to Secrets Manager Service console Click on the secret that was created by the CloudFormation template. The secret name will be “DemoWorkshopSecret“. In the “Rotation configuration” section, click “Edit rotation”. Toggle “Automatic rotation”. Under “Rotation schedule”, enter the number of days this secret will be rotated. e.g. 30 days. Under “Rotation function”, choose the function named “SecretsManagerMySQLRotationLambda”. Click “Save”. At this point, you should see Green Banner on the top of the screen stating “Rotating your secret DemoWorkshopSecret” Wait for a few minutes and notice the messages in the SNS Portal.\nAccess the sample application API URL again and observe the value of the Version IDs AWSPREVIOUS and AWSCURRENT.\nNote that the AWSCURRENT version becomes the AWSPREVIOUS version.\nYou can also test application when the secret is scheduled for rotation by clicking “Rotate secret immediately”. Then access the application ApiUrl link after you see the Green success banner on the top of the screen.\n"
},
{
	"uri": "//localhost:1313/4/",
	"title": "Monitor Compliance of Secrets",
	"tags": [],
	"description": "",
	"content": "In this module, you will deploy the workflow to monitor compliance status of secrets stored in AWS Secrets Manager.\nArchitecture for Compliance Monitoring: "
},
{
	"uri": "//localhost:1313/5/",
	"title": "Automation of Incident Response Workflows",
	"tags": [],
	"description": "",
	"content": "In this module, you will configure the workflows to detect an intrusion when your secret’s Resource Policy is deleted. Let’s assume that a privileged user that does not have the permission to retrieve the secret value, tries to retrieve the secret value by deleting the resource policy.\nBy the end of this task, you will deploy the following workflow: "
},
{
	"uri": "//localhost:1313/4/4.5/",
	"title": "Test Secret CMK Compliance",
	"tags": [],
	"description": "",
	"content": "Steps:\nNavigate to Secrets Manager Service console\nClick on the secret that was created by the CloudFormation template deployed in Module-0. The secret name will be “DemoWorkshopSecret“.\nIn the “Secret details” section, click “Edit encryption key” from the drop down “Actions” menu:\nSelect “aws/secretsmanager”.\nUncheck “Create new version of secret with new encryption key” option.\nNOTE: For the demonstration purposes during this workshop, this option is not selected. This is NOT a security best practice for a production environment. In a production environment, it is recommended that you select this option for creating new version of secret with new encryption key.\nClick “Save”. You will see a green banner on top of the screen indicating a successful update.\nNow revert back to the Encryption Key to the CMK with alias “AWSSecretsManagerWorkshopKey”. This CMK was created by the CloudFormation template in module-0.\nUncheck “Create new version of secret with new encryption key” option.\nClick “Save”. You will see a green banner on top of the screen indicating a successful update.\nWait for a few minutes and notice the messages in the SNS Portal.\n"
},
{
	"uri": "//localhost:1313/6/",
	"title": "Clean up resources",
	"tags": [],
	"description": "",
	"content": "We will take the following steps to delete the resources we created in this exercise.\nDelete EC2 instance Go to EC2 service management console\nClick Instances. Select both Public Linux Instance and Private Windows Instance instances. Click Instance state. Click Terminate instance, then click Terminate to confirm. Go to IAM service management console\nClick Roles. In the search box, enter SSM. Click to select SSM-Role. Click Delete, then enter the role name SSM-Role and click Delete to delete the role. Click Users. Click on user Portfwd. Click Delete, then enter the user name Portfwd and click Delete to delete the user. Delete S3 bucket Access System Manager - Session Manager service management console.\nClick the Preferences tab. Click Edit. Scroll down. In the section S3 logging. Uncheck Enable to disable logging. Scroll down. Click Save. Go to S3 service management console\nClick on the S3 bucket we created for this lab. (Example: lab-fcj-bucket-0001 ) Click Empty. Enter permanently delete, then click Empty to proceed to delete the object in the bucket. Click Exit. After deleting all objects in the bucket, click Delete\nEnter the name of the S3 bucket, then click Delete bucket to proceed with deleting the S3 bucket. Delete VPC Endpoints Go to VPC service management console Click Endpoints. Select the 4 endpoints we created for the lab including SSM, SSMMESSAGES, EC2MESSAGES, S3GW. Click Actions. Click Delete VPC endpoints. In the confirm box, enter delete.\nClick Delete to proceed with deleting endpoints. Click the refresh icon, check that all endpoints have been deleted before proceeding to the next step.\nDelete VPC Go to VPC service management console\nClick Your VPCs. Click on Lab VPC. Click Actions. Click Delete VPC. In the confirm box, enter delete to confirm, click Delete to delete Lab VPC and related resources.\n"
},
{
	"uri": "//localhost:1313/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]